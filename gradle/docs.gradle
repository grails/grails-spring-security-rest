tasks.register('cleanDocs', Delete) {
    delete file("${rootProject.buildDir}/docs")
}

tasks.register('aggregateGroovyApiDoc', Groovydoc) {
    def groovyDocProjects = subprojects.findAll { it.name in ['spring-security-rest', 'spring-security-rest-memcached', 'spring-security-rest-redis', 'spring-security-rest-grailscache', 'spring-security-rest-gorm'] }
    dependsOn = [tasks.named('cleanDocs')] + groovyDocProjects.collect { it.tasks.named('groovydoc') }

    description = 'Generates Groovy API Documentation for all plugin projects under rootDir/gapi'

    group = JavaBasePlugin.DOCUMENTATION_GROUP
    access = GroovydocAccess.PROTECTED
    includeAuthor = false
    includeMainForScripts = true
    processScripts = true
    source = groovyDocProjects.groovydoc.source
    destinationDir = file("${rootProject.buildDir}/docs/gapi")
    classpath = files(groovyDocProjects.groovydoc.classpath)
    groovyClasspath = files(groovyDocProjects.groovydoc.groovyClasspath)
}

tasks.register('docs') {
    group = JavaBasePlugin.DOCUMENTATION_GROUP
    dependsOn = ['aggregateGroovyApiDoc', 'spring-security-rest-docs:asciidoctor']
    finalizedBy 'copyAsciiDoctorDocs', 'ghPagesRootIndexPage'
}

tasks.register('copyAsciiDoctorDocs', Copy) {
    group = JavaBasePlugin.DOCUMENTATION_GROUP
    dependsOn = ['docs']
    from "${rootProject.allprojects.find { it.name == 'spring-security-rest-docs'}.projectDir}/build"
    includes = ['docs/**']
    into rootProject.buildDir
    includeEmptyDirs = false
}

tasks.register('ghPagesRootIndexPage', Copy) {
    group = 'documentation'
    dependsOn = ['docs']
    from file("${rootProject.allprojects.find { it.name == 'spring-security-rest-docs'}.projectDir}/src/docs/index.tmpl")
    into layout.buildDirectory
    rename 'index.tmpl', 'index.html'
}