apply plugin: 'maven-publish'
apply plugin: 'signing'

ext.set('signing.keyId', project.findProperty('signing.keyId') ?: System.getenv('SIGNING_KEY'))
ext.set('signing.password', project.findProperty('signing.password') ?: System.getenv('SIGNING_PASSPHRASE'))

def pomInfo = {
	delegate.name project.title
	delegate.description project.projectDesc
	delegate.url projectUrl

	delegate.licenses {
		delegate.license {
			delegate.name 'Apache-2.0'
			delegate.url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
			delegate.distribution 'repo'
		}
	}

	delegate.scm {
		delegate.url "scm:git@github.com:${githubSlug}.git"
		delegate.connection "scm:git@github.com:${githubSlug}.git"
		delegate.developerConnection "scm:git@github.com:${githubSlug}.git"
	}

	delegate.developers {
		delegate.developer {
			delegate.id 'alvarosanchez'
			delegate.name 'Alvaro Sanchez-Mariscal'
		}
		delegate.developer {
			delegate.id 'jameskleeh'
			delegate.name 'James Kleeh'
		}
		delegate.developer {
			delegate.id 'jdaugherty'
			delegate.name "James Daugherty"
		}
	}
}

publishing {
	publications {
		maven(MavenPublication) {
			artifactId = project.name
			groupId = project.group
			version = project.version

			if(!isProfile) {
				from components.java

				artifact sourcesJar
				artifact javadocJar
			}

			pom.withXml {
				def pomNode = asNode()
				pomNode.children().last() + pomInfo
			}
		}
	}

	if (isSnapshot) {
		repositories {
			maven {
				credentials {
					username = project.findProperty('artifactoryPublishUsername') ?: ''
					password = project.findProperty('artifactoryPublishPassword') ?: ''
				}
				url = isProfile ?
						uri('https://repo.grails.org/grails/libs-snapshots-local') :
						uri('https://repo.grails.org/grails/plugins3-snapshots-local')


			}
		}
	}
}

afterEvaluate {
	signing {
		required = { isReleaseVersion && gradle.taskGraph.hasTask('publish') }
		sign(publishing.publications.maven)
	}
}

tasks.withType(Sign) {
	onlyIf { isReleaseVersion }
}
