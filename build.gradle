import io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "io.github.gradle-nexus:publish-plugin:$gradlePublishPlugin"
        classpath 'com.adarshr:gradle-test-logger-plugin:4.0.0'
    }
}

plugins {
    id 'idea'
    id 'io.github.gradle-nexus.publish-plugin' version "$gradlePublishPlugin"
    id "com.github.ben-manes.versions" version "0.39.0"
}

allprojects {
    apply plugin:"idea"
}

def pluginProjects = ['spring-security-rest', 'spring-security-rest-memcached', 'spring-security-rest-redis', 'spring-security-rest-grailscache', 'spring-security-rest-gorm']
def profileProjects = ['spring-security-rest-testapp-profile']
def publishedProjects = pluginProjects + profileProjects

version projectVersion

subprojects { Project project ->
    group projectGroup
    version projectVersion

    ext {
        grailsVersion = project.grailsVersion
        isSnapshot = version.endsWith('SNAPSHOT')
        isReleaseVersion = !ext.isSnapshot
        isProfile = project.name.endsWith('-profile')
    }

    repositories {
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
    }
    if (project.name != "spring-security-rest-docs" &&
            project.name != "spring-security-rest-testapp-profile" &&
            !project.name.startsWith("build") ) {
        apply plugin: "org.grails.grails-plugin"
    }

    tasks.withType(Test) {
        useJUnitPlatform()
    }

    if (project.name in pluginProjects) {

        sourceCompatibility = targetCompatibility = JavaVersion.toVersion(11)

        apply plugin: "java-library"

        dependencies {
            console "org.grails:grails-console"

            api "org.springframework.boot:spring-boot-starter-logging"
            api "org.springframework.boot:spring-boot-autoconfigure"
            api "org.grails:grails-core"
            api "org.grails.plugins:spring-security-core:$springSecurityCoreVersion"

            api "org.grails:grails-plugin-services"
            api "org.grails:grails-plugin-domain-class"

            testImplementation "org.grails:grails-gorm-testing-support"
            testImplementation "org.grails:grails-web-testing-support"
            testImplementation('com.athaydes:spock-reports:2.5.1-groovy-3.0') {
                transitive = false
            }
        }

        apply plugin: 'com.adarshr.test-logger'

        testlogger {
            showFullStackTraces true
            showStandardStreams true
            showPassedStandardStreams false
            showSkippedStandardStreams false
            showFailedStandardStreams true
        }
    }

    if (project.name in profileProjects) {
        apply plugin: "org.grails.grails-profile"
    }

    if (project.name in publishedProjects) {
        apply from: rootProject.file("gradle/publishing.gradle")
    }
}

apply from: rootProject.file("gradle/docs.gradle")

//do not generate extra load on Nexus with new staging repository if signing fails
tasks.withType(InitializeNexusStagingRepository).configureEach {
    shouldRunAfter(tasks.withType(Sign))
}