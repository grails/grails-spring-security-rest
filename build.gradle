buildscript {
    repositories {
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath 'com.adarshr:gradle-test-logger-plugin:4.0.0'
    }
}

plugins {
    id 'idea'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
}

allprojects {
    apply plugin:"idea"
}

def pluginProjects = ['spring-security-rest', 'spring-security-rest-memcached', 'spring-security-rest-redis', 'spring-security-rest-grailscache', 'spring-security-rest-gorm']
def profileProjects = ['spring-security-rest-testapp-profile']
def publishedProjects = pluginProjects + profileProjects

ext {
    grailsVersion = project.grailsVersion
    isSnapshot = projectVersion.endsWith('SNAPSHOT')
    isReleaseVersion = !isSnapshot
}

ext."signing.keyId" = project.hasProperty("signing.keyId") ? project.getProperty('signing.keyId') : System.getenv('SIGNING_KEY')
ext."signing.password" = project.hasProperty("signing.password") ? project.getProperty('signing.password') : System.getenv('SIGNING_PASSPHRASE')
ext."signing.secretKeyRingFile" = project.hasProperty("signing.secretKeyRingFile") ? project.getProperty('signing.secretKeyRingFile') : "${System.properties['user.home']}${File.separator}.gnupg${File.separator}secring.gpg"

nexusPublishing {
    repositories {
        sonatype {
            def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
            def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
            def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileId") ? project.sonatypeOssStagingProfileId : ''
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            username = ossUser
            password = ossPass
            stagingProfileId = ossStagingProfileId
            useStaging = isReleaseVersion
        }
    }
    transitionCheckOptions {
        maxRetries.set(60)
        delayBetween.set(java.time.Duration.ofMillis(4000))
    }
}

subprojects { Project project ->
    group "org.grails.plugins"
    version projectVersion

    repositories {
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
    }
    if (project.name != "spring-security-rest-docs" &&
        project.name != "spring-security-rest-testapp-profile" &&
            !project.name.startsWith("build") ) {
        apply plugin: "org.grails.grails-plugin"
    }

    tasks.withType(Test) {
        useJUnitPlatform()
    }

    if (project.name in pluginProjects) {

        sourceCompatibility = targetCompatibility = 1.8

        apply plugin: "java-library"

        dependencies {
            console "org.grails:grails-console"

            api "org.springframework.boot:spring-boot-starter-logging"
            api "org.springframework.boot:spring-boot-autoconfigure"
            api "org.grails:grails-core"
            api "org.grails.plugins:spring-security-core:$springSecurityCoreVersion"

            api "org.grails:grails-plugin-services"
            api "org.grails:grails-plugin-domain-class"

            testImplementation "org.grails:grails-gorm-testing-support"
            testImplementation "org.grails:grails-web-testing-support"
            testImplementation('com.athaydes:spock-reports:2.5.1-groovy-3.0') {
                transitive = false
            }
        }

        apply plugin: 'com.adarshr.test-logger'

        testlogger {
            showFullStackTraces true
            showStandardStreams true
            showPassedStandardStreams false
            showSkippedStandardStreams false
            showFailedStandardStreams true
        }
    }

    if (project.name in profileProjects) {
        apply plugin: "org.grails.grails-profile"
    }

    if (project.name in publishedProjects && project.name != "spring-security-rest-docs" &&
            project.name != "spring-security-rest-testapp-profile") {
        apply plugin: 'maven-publish'
        apply plugin: 'signing'
        publishing {

            repositories {
                maven {
                    credentials {
                        def u = System.getenv("ARTIFACTORY_USERNAME") ?: project.hasProperty("artifactoryPublishUsername") ? project.artifactoryPublishUsername : ''
                        def p = System.getenv("ARTIFACTORY_PASSWORD") ?: project.hasProperty("artifactoryPublishPassword") ? project.artifactoryPublishPassword : ''
                        username = u
                        password = p
                    }
                    if (isSnapshot) {
                        url "https://repo.grails.org/grails/plugins3-snapshots-local"
                    } else {
                        url "https://repo.grails.org/grails/plugins3-releases-local"
                    }
                }
            }

            publications {
                mavenRelease(MavenPublication) {

                    groupId = project.group
                    artifactId = project.name
                    version = project.version

                    from components.java

                    artifact sourcesJar
                    artifact javadocJar

                    pom {
                        name = 'Spring Security REST plugin'
                        description = 'Grails plugin to implement token-based, RESTful authentication using Spring Security'
                        url = 'https://github.com/grails/grails-spring-security-rest'
                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }
                        developers {
                            developer {
                                id = 'alvarosanchez'
                                name = 'Alvaro Sanchez-Mariscal'
                                email = ''
                            }
                            developer {
                                id = 'jameskleeh'
                                name = 'James Kleeh'
                                email = ''
                            }
                        }
                        scm {
                            connection = 'scm:git:https://github.com/grails/grails-spring-security-rest.git'
                            developerConnection = 'scm:git:https://github.com/grails/grails-spring-security-rest.git'
                            url = 'https://github.com/grails/grails-spring-security-rest/tree/3.0.x'
                        }
                    }
                }
            }
        }

        signing {
            sign publishing.publications.mavenRelease
        }
    }
}

task aggregateGroovyDoc(type: Groovydoc) {
    def groovyDocProjects = subprojects.findAll { it.name in pluginProjects }
    group = JavaBasePlugin.DOCUMENTATION_GROUP

    dependsOn groovyDocProjects.groovydoc
    source groovyDocProjects.groovydoc.source
    destinationDir file("${buildDir}/docs/groovydoc")
    classpath = files(groovyDocProjects.groovydoc.classpath)
    groovyClasspath = files(groovyDocProjects.groovydoc.groovyClasspath)
}